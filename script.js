const randomness = 10
const padding = 10
const rand = (delta = randomness) => (~~(Math.random() * 100) / 100 * 2 - 1) * delta
for (const el of document.querySelectorAll('.beam')) {
	el.setAttribute('viewBox', '0 0 100 100')
	el.setAttribute('width', '100')
	el.setAttribute('xmlns', "http://www.w3.org/2000/svg")
	el.setAttribute('xmlns:xlink', "http://www.w3.org/1999/xlink")
	el.setAttribute('height', '100')
	el.innerHTML = `<path
	fill="none"
	stroke-linecap="round"
	d="
		M ${50 + rand()},${padding + rand()} 
		C 50,50 50,50 ${50 + rand()},${100 - padding + rand()}
	"/>`
}

const time = 3000
for (const e of document.querySelectorAll('.index')) {
	/** @type HTMLElement */
	const el = e
	el.innerHTML = '00'
	el.style.animationDuration = `${time}ms`
	const to = parseInt(el.getAttribute('data-index'))

	let finished = false;

	const ob = new IntersectionObserver((e) => {
		if (!e[0].isIntersecting) {
			return
		}

		if (finished) {
			return;
		}
		finished = true;

		el.classList.add('changing')
		el.innerHTML = '00'

		for (let i = 1; i <= to + 1; ++i) {
			setTimeout(() => {
				if (i == to + 1) {
					el.classList.remove('changing')
				} else {
					el.innerHTML = i.toString().padStart(2, '0')
				}
			}, (time / (to + 1)) * i)
		}
	}, {
		'threshold': 0.4
	})
	ob.observe(el)
}


// i drew some random scribbles in inkscape, and then just copied the path `d`
// attributes into here:
const crossPaths = [
	[
		`m 10.024041,19.104643 c 1.886915,1.193393 3.811217,2.237779 5.896495,3.066177 2.086029,0.828697 10.169561,3.569695 11.910919,4.009617 5.233507,1.322149 10.529366,2.384375 15.802606,3.537897 1.016745,0.222412 2.050776,0.361184 3.066177,0.589649 0.558402,0.12564 1.112002,0.279214 1.651019,0.47172 0.03702,0.01322 0.0278,0.09013 0,0.11793 -0.08339,0.08339 -0.236581,-0.01302 -0.35379,0 -0.276263,0.0307 -0.550778,0.07566 -0.825509,0.117929 -0.74735,0.114977 -1.496558,0.219437 -2.240668,0.35379 -2.086452,0.376721 -4.16394,0.801981 -6.250284,1.179299 -11.156311,2.017631 1.852297,-0.518566 -10.259901,2.004808 -6.09303,1.269381 -7.336385,1.357637 -13.915728,2.948248 -0.918612,0.222082 -1.812951,0.535368 -2.712387,0.825509 -0.736441,0.237561 -1.474964,0.510469 -1.179299,0.707579 0.693838,0.462559 1.645772,0.28155 2.476527,0.35379 9.439918,0.820862 -3.9977816,-0.520129 7.665444,0.707579 7.428366,0.781934 14.925256,1.299778 22.28875,2.594458 1.39001,0.244397 2.750383,0.634765 4.127546,0.943439 0.902846,0.202362 1.822741,0.335465 2.712388,0.58965 0.491367,0.14039 0.9339,0.417771 1.415158,0.589649 0.07404,0.02644 0.15724,0 0.23586,0 0.03931,0 -0.07862,0 -0.11793,0`,
	],
	[
		`M 54.626781,1.1500247 C 49.551833,2.1143371 44.4287,3.8473555 39.27569,5.9837221 36.507152,7.1315199 33.739235,8.3789075 30.970682,9.5192043 28.54344,10.518924 26.116611,11.436402 23.689498,12.403287 c -0.332347,0.132397 -3.467346,1.096817 -4.133437,2.047028 -0.122263,0.174415 0.07784,0.390854 0.219603,0.422304 1.616314,0.358586 3.277028,0.604634 4.971611,0.729386 2.29731,0.169123 4.660334,0.105749 6.992438,0.151381 7.056149,0.138063 8.816609,-0.01213 15.848972,0.782005 2.368554,0.26747 4.759372,0.491896 7.017168,1.072355 1.986681,0.510756 3.844639,1.340997 5.681963,2.192473 0.101588,0.04708 -0.237423,0.23066 -0.362927,0.272541 -0.914752,0.305263 -1.834374,0.606469 -2.733273,0.760687 -1.808867,0.310336 -3.595744,0.483404 -5.374769,0.630354 -9.88909,0.816853 -19.667546,1.224814 -29.605025,2.266682 -7.72399,0.809802 -10.381932,0.668596 -17.5760171,2.981226 -1.1330763,0.364242 -2.2732803,0.957041 -3.4075811,1.501946 -0.044388,0.02133 -0.09001,0.132515 -0.064958,0.166224 0.6033313,0.811826 1.7373749,0.794601 2.6662232,1.051307 2.3912371,0.660865 4.8155726,1.23804 7.223358,1.857059 4.815573,1.23804 9.631145,2.476078 14.446719,3.714118 1.050828,0.270157 6.890085,1.435899 8.426553,2.715159 0.15424,0.128421 -0.389659,0.525629 -0.609349,0.575034 -1.086966,0.244449 -2.13126,0.219704 -3.185887,0.278479 -5.265174,0.293433 -4.860915,-0.199824 -11.099055,1.170849 -3.000134,0.659204 -5.911544,0.844292 -8.719484,3.611849 -0.6906782,0.680744 0.287906,1.144175 1.525893,1.672756 1.204614,0.514331 2.4687,0.89859 3.714775,1.32088 33.657968,11.406616 -6.479968,-2.457677 30.016168,10.46073 16.308851,5.772784 19.380606,-2.349705 16.101271,6.041887`
	],
	[
		`m 54.955331,8.3730225 c -2.952612,4.2778495 -5.008838,9.2082125 -8.373022,13.2081485 -3.599815,4.280095 -7.379315,8.415415 -11.32127,12.382639 -1.061571,1.068375 -10.728419,9.177239 -12.500569,10.84955 -2.569954,2.425168 -2.818152,2.90933 -4.481336,5.542705 -0.75969,1.202842 -1.540869,2.838098 -2.594458,3.891687`,
		`m 19.576363,4.9530556 c 0.157239,0.2751697 0.314479,0.5503395 0.471719,0.8255093 0.62896,0.9434391 1.320257,1.8481732 1.886878,2.8303174 0.614957,1.065925 1.113011,2.1952777 1.651019,3.3020367 1.248962,2.569293 4.182998,8.795096 5.306845,11.20334 3.16947,6.791722 4.000402,8.676335 7.429584,16.274326 0.513921,1.138688 1.077848,2.256574 1.533088,3.419967 0.133974,0.342376 0.675324,2.247383 0.82551,2.948247 0.05824,0.271794 -0.0064,0.576892 0.117929,0.82551 0.02486,0.04972 0.104447,0.064 0.11793,0.117929 0.0286,0.114409 0,0.23586 0,0.35379 0.03931,0.15724 0.06668,0.317958 0.11793,0.47172 0.392105,1.176315 0.773861,2.36663 1.179299,3.537897 0.638417,1.844314 0.64486,1.504266 1.061369,3.066177 0.270307,1.01365 0.326602,2.075636 0.70758,3.066177 0.290071,0.754185 0.686938,1.471165 0.943439,2.240668`
	]
]
for (const e of document.querySelectorAll('.crossed-out')) {
	let innerHTML = ''
	const values = e.getAttribute('data-values').split(';')
	for (let i = 0; i < values.length; ++i) {
		innerHTML += `<span class="value ${i == values.length - 1 ? '' : 'crossed'}" style="transform:rotate(${rand(10)}deg) translate(${rand(7)}%, ${rand(7)}%);">
				${values[i]}
				 <svg width="64"	height="64" viewBox="0 0 64 64" class="cross">
					${i == values.length - 1
				? `<path d="m 50.577433,58.271404 c -0.702749,0.113251 -1.39796,0.293116 -2.108246,0.339754 -1.019863,0.06696 -2.044118,0 -3.066177,0 -2.162048,0 -4.324816,-0.05578 -6.486145,0 -3.93283,0.101492 -7.864216,0.266293 -11.792989,0.471719 -4.923211,0.257423 -5.946027,0.562275 -10.377831,0.70758 -0.94622,0.03102 -3.133374,-0.105713 -4.363406,0.11793 -0.03868,0.007 -0.03729,0.105499 0,0.11793 0.111878,0.03729 0.236089,-0.0074 0.35379,0 2.706941,0.169183 0.358783,0.117929 3.537897,0.117929 6.376002,0 1.454489,0.03413 8.373022,-0.117929 2.083296,-0.04579 4.166856,-0.07862 6.250285,-0.11793 3.695136,-0.07862 7.390363,-0.153135 11.08541,-0.23586 1.572496,-0.03521 3.144504,-0.09297 4.717195,-0.11793 0.904016,-0.01435 1.808878,-0.03346 2.712388,0 0.161968,0.006 0.388099,0.256773 0.47172,0.11793 0.261595,-0.434353 0.232634,-0.987047 0.348951,-1.48057"/>`
				: crossPaths[Math.round(Math.random() * (crossPaths.length - 1))].map(d => `<path d="${d}" />`).join('')
			}
					</svg> 
    </span>`
	}
	e.innerHTML = innerHTML
}

window.addEventListener('scroll', () => {
	if (window.scrollY > 10) {
		document.querySelector('nav').classList.add('scrolled')
	}
	else {
		document.querySelector('nav').classList.remove('scrolled')
	}
})

const appearObserver = new IntersectionObserver((e) => {
	if (e[0].isIntersecting) {
		document.querySelector('header').classList.add('top')
	} else {
		document.querySelector('header').classList.remove('top')
	}
})
appearObserver.observe(document.querySelector('.links'))
